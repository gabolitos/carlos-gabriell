/* UNIV JOSE CARLOS ESPINOZA LAURA, UNIV CARLOS GABRIEL NINA HUANCA, LABORATORIO #3 EJERCICIO #1 */
#include <stdio.h>
#include <stdlib.h>
#define MAX 20


int main() {
	int o;
menu:
	printf("\t\tMATRICES\n\n");
    printf("\n1 SUMA A+B");
    printf("\n2 RESTA A-B");
    printf("\n3 MULTIPLICACION AxB");
    printf("\n4 MULTIPLICAR POR UN ESCALAR k*A");
    printf("\n5 MATRIZ TRANSPUESTA A^t");
    printf("\n6 DETERMINANTE DE UNA MATRIZ |A|");
    printf("\n7 RESOLVER MATRIZ POR METODO DE GAUSS");
    printf("\n8 SALIR");
    printf("\n\nElija una opcion:");
    scanf("%d",&o);
    system("cls");
    //SUMA
    if(o==1){
    	printf("\t\t--Usted ha elegido suma de matrices--");
    	int nf, nc;
    	printf("\nIngrese el numero de filas\n");
    	scanf("%d", &nf);
    	printf("\nIngrese el numero de columnas\n");
    	scanf("%d", &nc);
    	system("cls");
    	{
    		int m1[nf][nc], m2[nf][nc], m3[nf][nc], x, y;
    		//Matriz 1
    		printf("\n\t--Ingrese los datos de la Matriz 1--\n");
    		for (x=0; x<nf; x++){
    			for (y=0; y<nc; y++){
    				printf("\n Posicion [%d][%d]:", x+1, y+1);
    				scanf("%d", &m1[x][y]);
				}
			}
			system("cls");
			//Matriz 2
			printf("\n\t--Ingrese los datos de la Matriz 2--\n");
			for (x=0; x<nf; x++){
    			for (y=0; y<nc; y++){
    				printf("\n Posicion [%d][%d]:", x+1, y+1);
    				scanf("%d", &m2[x][y]);
    				m3[x][y]=m1[x][y]+ m2[x][y];
				}
			}
			system("cls");
			//Imprimir Matriz 1
			printf("\n\n\t\t--Matriz 1--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m1[x][y]);
				}
			printf("\n");
			}	
			//Imprimit Matriz 2
			printf("\n\n\t\t--Matriz 2--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m2[x][y]);
				}
			printf("\n");
			}	
			//Resultado de la suma
			printf("\n\n\t\t--Resultado de la suma de Matrices--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m3[x][y]);
				}
			printf("\n");
			}
		}
		system("pause");
		system("cls");
		goto menu;
	}
	//RESTA
    if(o==2){
    	printf("\t\t--Usted ha elegido resta de matrices--");
    	int nf, nc;
    	printf("\nIngrese el numero de filas\n");
    	scanf("%d", &nf);
    	printf("\nIngrese el numero de columnas\n");
    	scanf("%d", &nc);
    	system("cls");
    	{
    		int m1[nf][nc], m2[nf][nc], m3[nf][nc], x, y;
    		//Matriz 1
    		printf("\n\t--Ingrese los datos de la Matriz 1--\n");
    		for (x=0; x<nf; x++){
    			for (y=0; y<nc; y++){
    				printf("\n Posicion [%d][%d]:", x+1, y+1);
    				scanf("%d", &m1[x][y]);
				}
			}
			system("cls");
			//Matriz 2
			printf("\n\t--Ingrese los datos de la Matriz 2--\n");
			for (x=0; x<nf; x++){
    			for (y=0; y<nc; y++){
    				printf("\n Posicion [%d][%d]:", x+1, y+1);
    				scanf("%d", &m2[x][y]);
    				m3[x][y]=m1[x][y]- m2[x][y];
				}
			}
			system("cls");
			//Imprimir Matriz 1
			printf("\n\n\t\t--Matriz 1--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m1[x][y]);
				}
			printf("\n");
			}	
			//Imprimit Matriz 2
			printf("\n\n\t\t--Matriz 2--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m2[x][y]);
				}
			printf("\n");
			}	
			//Resultado de la resta
			printf("\n\n\t\t--Resultado de la resta de Matrices--\n\n");
			for (x=0; x<nf; x++){
				for (y=0; y<nc; y++){
					printf("%6d ", m3[x][y]);
				}
			printf("\n");
			}
		}
		system("pause");
		system("cls");
		goto menu;
	}
	//MULTIPLICACION
	if(o==3){
datos:
    	printf("\t--Usted ha elegido multiplicacion de matrices--");
    	int nf1, nc1, nc2, nf2;
    	printf("\nIngrese el numero de filas de la Matriz 1\n");
    	scanf("%d", &nf1);
    	printf("\nIngrese el numero de columnas de la Matriz 1\n");
    	scanf("%d", &nc1);
    	system("cls");
    	printf("\nIngrese el numero de filas de la Matriz 2\n");
    	scanf("%d", &nf2);
    	printf("\nIngrese el numero de columnas de la Matriz 2\n");
    	scanf("%d", &nc2);
    	system("cls");
    	
    	if(nc1!=nf2){
    		system("cls");
    		printf("\n\n\t\t--No es posible realizar esta multiplicacion--");
    		printf("\n\t\t--Vuelva a intentar--\n\n");
    		goto datos;
		}
		
		if (nc1==nf2){
			int m1[nf1][nc1], m2[nf2][nc2], m3[nf1][nc2], x, y, k;
			//Rellenar datos Matriz 1
			printf("\n\t--Ingrese los datos de la Matriz 1--\n");
			for (x=0; x<nf1; x++){
				for (y=0; y<nc1; y++){
					printf("\n Posicion [%d][%d]:", x+1, y+1);
					scanf("%d", &m1[x][y]);
				}
			}
			system("cls");
			
			//Rellenar datos Matriz 2
			printf("\n\t--Ingrese los datos de la Matriz 2--\n");
			for (x=0; x<nf2; x++){
				for (y=0; y<nc2; y++){
					printf("\n Posicion [%d][%d]:", x+1, y+1);
					scanf("%d", &m2[x][y]);
				}
			}
			system("cls");
			//Obtener resultado
			for (x=0; x<nf1; x++){
				for (y=0; y<nc2; y++){
					m3[x][y]=0;
					for (k=0; k<nc1; k++){
						m3[x][y]+=m1[x][k]*m2[k][y];
					}
				}
			}
			
			//Imprimir Matriz 1
			printf("\n\n\t\t--Matriz 1--\n\n");
			for (x=0; x<nf1; x++){
				for (y=0; y<nc1; y++){
					printf("%6d ", m1[x][y]);
				}
			printf("\n");	
			}
			//Imprimir Matriz 2
			printf("\n\n\t\t--Matriz 2--\n\n");
			for (x=0; x<nf2; x++){
				for (y=0; y<nc2; y++){
					printf("%6d ", m2[x][y]);
				}
			printf("\n");
			}
			//Imprimir Resultado
			printf("\n\n\t\t--Resultado de la multiplicacion de Matrices--\n\n");
			for (x=0; x<nf1; x++){
				for (y=0; y<nc2; y++){
					printf("%6d ", m3[x][y]);
				}
			printf("\n");
			}
		}
		system("pause");
		system("cls");
		goto menu;
	}
	//MULTIPLICAR POR UN ESCALAR
	if(o==4){
		printf("\t--Usted ha elegido multiplicar una matriz por un escalar--");
		int nf, nc, k;
		printf("\nIngrese el numero de filas de la Matriz\n");
    	scanf("%d", &nf);
    	printf("\nIngrese el numero de columnas de la Matriz\n");
    	scanf("%d", &nc);
    	system("cls");
    	{
    		int k;
    		printf("\n-- Ingrese el escalar --\n");//Escalar
			scanf("%d", &k);
    		printf("\n-- Ingrese los datos de la matriz --\n"); //Datos de la matriz
    		int i, j, m1[nf][nc], m2[nf][nc];
    		for(i=0; i<nf; i++){
    			for(j=0; j<nc; j++){
    				printf("Posicion[%d][%d] = ",i+1,j+1);
    				scanf("%d",&m1[i][j]);
    				m2[i][j]=m1[i][j]*k;
				}
			}
			system("cls");
			
			printf("\n\n\t\t--Matriz 1--\n\n"); //Imprimir matriz
			for (i=0; i<nf; i++){
				for (j=0; j<nc; j++){
					printf("%6d ", m1[i][j]);
				}
			printf("\n");	
			}
			printf("\n\n\t\tPOR EL ESCALAR <<%d>>", k); //Imprimir escalar
			
			printf("\n\n\t\t--Resultado de la multiplicacion de Matrices--\n\n"); //Resultado
			for (i=0; i<nf; i++){
				for (j=0; j<nc; j++){
					printf("%6d ", m2[i][j]);
				}
				printf("\n");
			}
		}
		system("pause");
		system("cls");
		goto menu;
	}
	
	//TRANSPUESTA
	if(o==5){
		printf("\t--Usted ha elegido Transpuesta de una matriz--");
    	int nf, nc;
    	printf("\nIngrese el numero de filas de la Matriz\n");
    	scanf("%d", &nf);
    	printf("\nIngrese el numero de columnas de la Matriz\n");
    	scanf("%d", &nc);
    	system("cls");
    	{
    		printf("\n-- Ingrese los datos de la matriz --\n"); //Ingresar datos de la matriz
    		int i, j, m[nf][nc];
    		for(i=0; i<nf; i++){
    			for(j=0; j<nc; j++){
    				printf("Posicion[%d][%d] = ",i+1,j+1);
    				scanf("%d",&m[i][j]);
				}
			}
			system("cls");
			printf("\n\n\t\tMatriz original"); //Imprimir la matriz
			printf("\n\n");
			for(i=0; i<nf; i++){
				printf("\n\t\t");
				for(j=0; j<nc; j++){
					printf(" %6d ", m[i][j]);
				}
			}
			
			printf("\n\n\t\tMatriz Transpuesta"); //Cambiar renglones por filas e Imprimir la matriz transpuesta
			printf("\n\n");
			for(i=0; i<nc; i++){
				printf("\n\t\t");
				for(j=0; j<nf; j++){
					printf(" %6d ",m[j][i]);
				}
			}
			printf("\n\n");
		}
		system("pause");
		system("cls");
		goto menu;	
	}
	//DETERMINANTE
	if(o==6){
		printf("\t--Usted ha elegido Determinante de una matriz--");
		void mostrar_matriz(int matriz[][MAX], int orden);
		int determinante(int matriz[][MAX], int orden);
		int cofactor(int matriz[][MAX], int orden, int fila, int columna);
    	int orden, i, j;
    	int matriz[MAX][MAX];
    	printf("\nIngrese el orden de la Matrizm (Maximo %d)\n", MAX);
    	scanf("%d", &orden);
    	system("cls");
    	
    	//SI EL ORDEN ELEGIDO NO ES POSIBLE
    	while (orden < 0 || orden > MAX) {
    		printf("\nEl orden de la matriz no puede ser mayor que %d\n", MAX);
			printf("Ingrese nuevamente el orden de la matriz: ");
			scanf("%d", &orden);
		}
		
		//Datos de la matriz
		printf("\nIngrese los elementos de la matriz:\n\n");
		for (i = 0; i < orden; i++) {
			for (j = 0; j < orden; j++){
				printf("Posicion[%d][%d] = ",i+1,j+1);
				scanf("%d", &matriz[i][j]);
			}
		}
		system("cls");
		
		printf("\n\t\t-----MATRIZ:------\n");
		mostrar_matriz(matriz, orden);
		printf("\nEl DETERMINANTE es: %d\n", determinante(matriz, orden));
		
		getchar();
		getchar();

		system("pause");
		system("cls");
		goto menu;
	}
	
	//RESOLVER MATRIZ POR METODO DE GAUSS
	if(o==7){
		int num_inc, i, j, k, x, y;
		printf("\t--Usted ha elegido Resolver un sistema de ecuaciones--\n\n");
		printf("Numero de incognitas:\n");
		scanf(" %d", &num_inc);
		float matriz[num_inc][num_inc+1], recu[1][num_inc+1], incog[num_inc], aux0, aux1, aux2, ayuda;
		
		
		//Introducir datos de la matriz
		printf("\nIntroduce los valores de la Matriz:\n\n");
		for(i=0;i<num_inc;i++){
			for(j=0;j<num_inc+1;j++){
				printf("Posicion[%d][%d] =  ", i+1, j+1);
				scanf(" %d", &k);
				matriz[i][j] = k;
			}
			printf("\n");
		}
		system("cls");
		
		//Imprimir la matriz
		printf("\n\n  Matriz:  \n\n");
		for(i=0;i<num_inc;i++){
			for(j=0;j<num_inc+1;j++){
				printf("  %.2f  ", matriz[i][j]);
			}
			printf("\n");
		}
		
		
		//Reducir la matriz a una matriz triangular
		for(i=0;i<num_inc-1;i++){
			aux1 = matriz[i][i];
			for(j=i+1;j<num_inc;j++){
				aux2 = matriz[j][i];
				for(k=i;k<num_inc+1;k++){
					aux0 = matriz[i][k];
					recu[0][k] = aux0;
					aux0 = aux0*aux2*(-1);
					matriz[i][k] = aux0;
					aux0 = matriz[j][k];
					aux0 = aux0*aux1*1;
					matriz[j][k] = aux0;
				}
				for(y=0;y<num_inc+1;y++){
					aux0 = matriz[i][y] + matriz[j][y];
					matriz[j][y] = aux0;
				}
				for(x=i;x<num_inc+1;x++){
					aux0 = recu[0][x];
					matriz[i][x] = aux0;
				}
			}
		}
		
		//Imprimir la nueva matriz
		printf("\n\n  Sistema Final de Ecuaciones:  \n\n");
		for(i=0;i<num_inc;i++){
			for(j=0;j<num_inc+1;j++){
				printf("  %.2f  ", matriz[i][j]);
			}
			printf("\n");
		}
		k=1;
		x=0;
		
		//Obtener los resultados de las incognitas
		for(i=num_inc-1;i>=0;i--){
			aux0 = matriz[i][i];
			aux1 = matriz[i][i+k];
			if(k==1){
				aux2 = aux1/aux0;
				incog[x] = aux2;
				for(j=num_inc-1;j>=0;j--){
					ayuda = matriz[j][num_inc-k];
					ayuda = ayuda*aux2;
					matriz[j][num_inc-k] = ayuda;
				}
				k++;
				x++;
			}
			else{
				for(y=i+1;y<num_inc;y++){
					ayuda = matriz[i][y];
					aux1 = aux1-ayuda;
				}
				aux2 = aux1/aux0;
				incog[x] = aux2;
				for(j=i;j>=0;j--){
					ayuda = matriz[j][num_inc-k];
					ayuda = ayuda*aux2;
					matriz[j][num_inc-k] = ayuda;
				}
				k++;
				x++;
			}	
		}
		
		
		//Imprimir los valores de las incognitas
		printf("\n El valor de las Incognitas es:  ");
		for(i=0;i<num_inc;i++){
			printf("\n  X%d:  %.2f", i+1, incog[num_inc-i-1]);
		}
		printf("\n\n\n");
		system("pause");
		system("cls");
		goto menu;
	}	
	
	if(o==8){
		
		
		//Despedida y agradecimiento
		printf ("\n\n\n\t\tGRACIAS POR USAR NUESTRO PROGRAMA!!!!\n");
		printf ("\t\tEsperamos haber sido utiles\n\n");
		printf ("\t---JOSE CARLOS ESPINOZA LAURA---\n");
		printf ("\t---CARLOS GABRIEL NINA HUANCA-----\n\n\n");

		system("pause");
		
	}
		
	return 0;
}


//Imprimir la matriz
void mostrar_matriz(int matriz[][MAX], int orden)
{
    int i, j;
    
    printf("\t\t-----Orden: %d-----\n", orden);
   for (i = 0; i < orden; i++) {
      for (j = 0; j < orden; j++) {
          printf("\t%6d", matriz[i][j]);
      }
      printf("\n");
   }
}
 
//Obtener determinante
int determinante(int matriz[][MAX], int orden)
{
   int det = 0.0, j;
   
   if (orden == 1) {
      det = matriz[0][0];
   } else {
      for (j = 0; j < orden; j++) {
         det = det + matriz[0][j] * cofactor(matriz, orden, 0, j);
      }
   }
   
   return det;
}
 
 //Obtener cofactor
int cofactor(int matriz[][MAX], int orden, int fila, int columna)
{
   int submatriz[MAX][MAX];
   int n = orden - 1;
   int i, j;
   
   int x = 0;
   int y = 0;
   for (i = 0; i < orden; i++) {
      for (j = 0; j < orden; j++) {
         if (i != fila && j != columna) {
            submatriz[x][y] = matriz[i][j];
            y++;
            if (y >= n) {
               x++;
               y = 0;
            }
         }
      }
   }
   
   return pow(-1.0, fila + columna) * determinante(submatriz, n);
}
